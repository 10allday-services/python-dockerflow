Django
======

Setup
-----

To install ``python-dockerflow``'s Django support please follow these steps:

#. Add ``dockerflow.django`` to your ``INSTALLED_APPS`` setting

#. Add the URL patterns to your project's URL patterns::

    urlpatterns = [
        url(r'^', include('dockerflow.django.urls', namespace='dockerflow')),
        # ...
    ]

#. Define a ``BASE_DIR`` setting that is the root path of your Django project.
   This will be used to locate the ``version.json`` file that is generated by
   CircleCI or another process during deployment.

#. Add the ``RequestSummaryMiddleware`` to your ``MIDDLEWARE_CLASSES`` or
   ``MIDDLEWARE`` setting::

    MIDDLEWARE_CLASSES = (
        # ...
        'dockerflow.django.middleware.RequestSummaryMiddleware',
        # ...
    )

#. Configure logging to use the ``JsonLogFormatter`` logging formatter for the
   ``request.summary`` logger (you may have to extend your existing logging
   configuration)::

    LOGGING = {
        'version': 1,
        'formatters': {
            'json': {
                '()': 'dockerflow.logging.JsonLogFormatter',
                'logger_name': '<< MySiteName >>'
            }
        },
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'json'
            },
        },
        'loggers': {
            'request.summary': {
                'handlers': ['console'],
                'level': 'DEBUG',
            },
        }
    }

Static content
--------------

To properly serve static content it's recommended to use `Whitenoise`_.
It contains a middleware that is able to serve files that were built by
Django's collectstatic management command (e.g. including bundle files
built by django-pipeline) with **far-future headers** and proper response
headers for the AWS CDN to work.

To enable Whitenoise, please install it from PyPI and then enable it
in your Django projet:

#. Set your ``STATIC_ROOT`` setting::

       STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

#. Add the middleware to your ``MIDDLEWARE`` (or ``MIDDLEWARE_CLASSES``) setting::

       MIDDLEWARE_CLASSES = [
           # 'django.middleware.security.SecurityMiddleware',
           'whitenoise.middleware.WhiteNoiseMiddleware',
           # ...
       ]

   Make sure to follow the SecurityMiddleware.

#. Enable the staticfiles_ storage that is able to compress files during
   collection and ship them with far-future headers::

       STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

.. _Whitenoise: https://whitenoise.readthedocs.io/

#. Install brotlipy_ so the storage can generate compressed files of your
   static files in the brotli_ format.

For more configuration options and details how to use Whitenoise see
the section about `Using WhiteNoise with Django`_ in its documentation.

.. _staticfiles: https://docs.djangoproject.com/en/stable/howto/static-files/
.. _brotli: https://en.wikipedia.org/wiki/Brotli
.. _brotlipy: http://brotlipy.readthedocs.org/en/latest/
.. _`Using WhiteNoise with Django`: https://whitenoise.readthedocs.io/en/stable/django.html

Settings
--------

``DOCKERFLOW_VERSION_CALLBACK``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The dotted import path for the callable that
returns the content to return under ``/__version__``.

Defaults to ``'dockerflow.version.get_version'`` which will be passed the
``BASE_DIR`` setting by default.

``DOCKERFLOW_CHECKS``
~~~~~~~~~~~~~~~~~~~~~

A list of dotted import paths to register during
Django setup, to be used in the rendering of the ``/__heartbeat__`` view.
Defaults to:

.. code-block:: python

    DOCKERFLOW_CHECKS = [
        'dockerflow.django.checks.check_database_connected',
        'dockerflow.django.checks.check_migrations_applied',
    ]
