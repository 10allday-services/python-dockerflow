Django
======

Setup
-----

To install ``python-dockerflow``'s Django support please follow these steps:

#. Add ``dockerflow.django`` to your ``INSTALLED_APPS`` setting

#. Add the URL patterns to your project's URL patterns::

    urlpatterns = [
        url(r'^', include('dockerflow.django.urls', namespace='dockerflow')),
        # ...
    ]

#. Define a ``BASE_DIR`` setting that is the root path of your Django project.
   This will be used to locate the ``version.json`` file that is generated by
   CircleCI or another process during deployment.

Settings
--------

``DOCKERFLOW_VERSION_CALLBACK``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The dotted import path for the callable that
returns the content to return under ``/__version__``.

Defaults to ``'dockerflow.version.get_version'`` which will be passed the
``BASE_DIR`` setting by default.

``DOCKERFLOW_CHECKS``
~~~~~~~~~~~~~~~~~~~~~

A list of dotted import paths to register during
Django setup, to be used in the rendering of the ``/__heartbeat__`` view.
Defaults to:

.. code-block:: python

    DOCKERFLOW_CHECKS = [
        'dockerflow.django.checks.check_database_connected',
        'dockerflow.django.checks.check_migrations_applied',
    ]

Checks
------

The provided checks hook into Django's `system check framework`_ to enable
the :func:`heartbeat view <dockerflow.django.views.heartbeat>` to diagnose
the current health of the Django project.

.. automodule:: dockerflow.django.checks
   :members:

.. _`system check framework`: https://docs.djangoproject.com/en/stable/ref/checks/

Signals
-------

During the rendering of the ``/__heartbeat__`` view two signals are being sent
to hook into the result of the checks:

.. data:: dockerflow.django.signals.heartbeat_passed

   The signal that is sent when the heartbeat checks pass successfully.

.. data:: dockerflow.django.signals.heartbeat_failed

   The signal that is sent when the heartbeat checks raise either a
   warning or worse (error, critical)

Both signals receive an additional ``level`` parameter that indicates the
maximum check level that failed during the rendering.

E.g. to hook into those signals to send data to statsd, do this:

.. code-block:: python

    from django.dispatch import receiver
    from dockerflow.django.signals import heartbeat_passed, heartbeat_failed
    from statsd.defaults.django import statsd

    @receiver(heartbeat_passed)
    def heartbeat_passed_handler(sender, level, **kwargs):
        statsd.incr('heartbeat.pass')

    @receiver(heartbeat_failed)
    def heartbeat_failed_handler(sender, level, **kwargs):
        statsd.incr('heartbeat.fail')

Views
-----

``dockerflow.django`` implements various views so the automatic application
monitoring can happen. They are mounted by including them in the root of a
URL configration:

.. code-block:: python

    urlpatterns = [
        url(r'^', include('dockerflow.django.urls', namespace='dockerflow')),
        # ...
    ]

.. automodule:: dockerflow.django.views
   :members:
